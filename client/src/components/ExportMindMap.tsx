import React from 'react';
import { Button } from '@/components/ui/button';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';
import { Download, FileText, Image, Share2 } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface ExportMindMapProps {
  nodes: any[];
  documentTitle: string;
  documentId: string;
}

export function ExportMindMap({ nodes, documentTitle, documentId }: ExportMindMapProps) {
  const { toast } = useToast();

  const exportAsMarkdown = () => {
    if (!nodes || nodes.length === 0) {
      toast({
        title: "No content to export",
        description: "The mind map is empty.",
        variant: "destructive"
      });
      return;
    }

    // Generate markdown from mind map nodes
    let markdown = `# ${documentTitle}\n\n`;
    
    // Group nodes by level
    const nodesByLevel = nodes.reduce((acc, node) => {
      if (!acc[node.level]) acc[node.level] = [];
      acc[node.level].push(node);
      return acc;
    }, {} as Record<number, any[]>);

    // Main topic (level 0)
    if (nodesByLevel[0]) {
      nodesByLevel[0].forEach(node => {
        markdown += `## ${node.title}\n\n${node.summary || ''}\n\n`;
      });
    }

    // Concepts (level 1)
    if (nodesByLevel[1]) {
      nodesByLevel[1].forEach(node => {
        markdown += `### ${node.title}\n\n${node.summary || ''}\n\n`;
      });
    }

    // Details (level 2)
    if (nodesByLevel[2]) {
      nodesByLevel[2].forEach(node => {
        markdown += `#### ${node.title}\n\n${node.summary || ''}\n\n`;
      });
    }

    markdown += `\n---\n\n*Generated by QuickLearned - AI-Powered Visual Learning*\n`;

    // Create and download file
    const blob = new Blob([markdown], { type: 'text/markdown;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `${documentTitle.replace(/[^a-zA-Z0-9]/g, '_')}_mindmap.md`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);

    toast({
      title: "Export successful",
      description: "Mind map exported as Markdown file.",
    });
  };

  const exportAsPDF = () => {
    // For PDF export, we'll use the browser's print functionality
    // Create a new window with printable content
    const printWindow = window.open('', '_blank');
    if (!printWindow) {
      toast({
        title: "Popup blocked",
        description: "Please allow popups to export as PDF.",
        variant: "destructive"
      });
      return;
    }

    let htmlContent = `
      <!DOCTYPE html>
      <html>
      <head>
        <title>${documentTitle} - Mind Map</title>
        <style>
          body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
          h1 { color: #2563eb; border-bottom: 2px solid #2563eb; padding-bottom: 10px; }
          h2 { color: #1e40af; margin-top: 30px; }
          h3 { color: #1e3a8a; margin-top: 20px; }
          h4 { color: #1e293b; margin-top: 15px; }
          .footer { margin-top: 50px; padding-top: 20px; border-top: 1px solid #ccc; font-size: 12px; color: #666; }
          @media print { body { margin: 20px; } }
        </style>
      </head>
      <body>
        <h1>${documentTitle}</h1>
    `;

    // Group nodes by level
    const nodesByLevel = nodes.reduce((acc, node) => {
      if (!acc[node.level]) acc[node.level] = [];
      acc[node.level].push(node);
      return acc;
    }, {} as Record<number, any[]>);

    // Main topic (level 0)
    if (nodesByLevel[0]) {
      nodesByLevel[0].forEach(node => {
        htmlContent += `<h2>${node.title}</h2><p>${node.summary || ''}</p>`;
      });
    }

    // Concepts (level 1)
    if (nodesByLevel[1]) {
      nodesByLevel[1].forEach(node => {
        htmlContent += `<h3>${node.title}</h3><p>${node.summary || ''}</p>`;
      });
    }

    // Details (level 2)
    if (nodesByLevel[2]) {
      nodesByLevel[2].forEach(node => {
        htmlContent += `<h4>${node.title}</h4><p>${node.summary || ''}</p>`;
      });
    }

    htmlContent += `
        <div class="footer">
          Generated by QuickLearned - AI-Powered Visual Learning
        </div>
      </body>
      </html>
    `;

    printWindow.document.write(htmlContent);
    printWindow.document.close();
    
    // Trigger print dialog
    printWindow.onload = () => {
      printWindow.print();
    };

    toast({
      title: "PDF export ready",
      description: "Use the print dialog to save as PDF.",
    });
  };

  const shareLink = async () => {
    try {
      const shareUrl = `${window.location.origin}/share/${documentId}`;
      
      if (navigator.share) {
        await navigator.share({
          title: `${documentTitle} - Mind Map`,
          text: 'Check out this AI-generated mind map!',
          url: shareUrl,
        });
      } else {
        // Fallback: copy to clipboard
        await navigator.clipboard.writeText(shareUrl);
        toast({
          title: "Link copied!",
          description: "Share link copied to clipboard.",
        });
      }
    } catch (error) {
      console.error('Share error:', error);
      toast({
        title: "Share failed",
        description: "Unable to share the mind map.",
        variant: "destructive"
      });
    }
  };

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline" size="sm" className="lowercase">
          <Download className="w-4 h-4 mr-2" />
          export & share
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={exportAsMarkdown}>
          <FileText className="w-4 h-4 mr-2" />
          export as markdown
        </DropdownMenuItem>
        <DropdownMenuItem onClick={exportAsPDF}>
          <Image className="w-4 h-4 mr-2" />
          export as pdf
        </DropdownMenuItem>
        <DropdownMenuItem onClick={shareLink}>
          <Share2 className="w-4 h-4 mr-2" />
          share link
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}